{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TickSys This package contains a framework, which enables integration between SAP and ticket systems.","title":"Home"},{"location":"#ticksys","text":"This package contains a framework, which enables integration between SAP and ticket systems.","title":"TickSys"},{"location":"install/","text":"Installation First, install dependencies. Addict Simbal Then, install TickSys using abapGit . The configuration is available under the SAP menu YTICKSYS .","title":"Installation"},{"location":"install/#installation","text":"First, install dependencies. Addict Simbal Then, install TickSys using abapGit . The configuration is available under the SAP menu YTICKSYS .","title":"Installation"},{"location":"jira/","text":"Activating Jira Add a new entry to YTTICKSYS_TICSY with the following values: TICSY_ID JIRA TICSY_TXT Jira TICSY_IMP_CLASS YCL_TICKSYS_JIRA Add a new entry to YTTICKSYS_JIDEF with the following values: SYSID (Your SY-SYSID) URL (Your base Jira URL) USERNAME (Your Jira username) PASSWORD (Your Jira password) API_TOKEN (Your Jira API token) Note that you must enter either a password or an API token. If you are accessing an on-premise Jira system with basic authentication, you should put in the password. If you are accessing Jira Cloud, you must create an API token for the user and put in the generated token. Add new entries to YTTICKSYS_JITRA for each status transition. For each \"STATUS A -> STATUS B\" transition, Jira has a unique transition ID. This table stores those values. In You may need help from your Jira admin to get those ID's since they are not visible on the user interface. FROM_STATUS (Source status ID. Sample: 10306) TO_STATUS (Target status ID. Sample: 10313) TRANSITION_ID (Transition ID. Sample: 91) Add new entries to YTTICKSYS_JISTA . This table determines the assignee to be assigned to the issue after a status update. STATUS_ID (Source status ID, leave blank for default. Sample: 10306) JIRA_FIELD (Field name containing the assignee. Sample: customfield_10114) PRIORITY (Priority of this rule) If you have custom fields for request transportation instructions, you need to register their custom fields into YTTICKSYS_JITIF . JIRA_FIELD (Field name containing instructions. Sample: customfield_10427) If you have custom fields containing related SAP TCode values, you need to register their custom fields into YTTICKSYS_JITCF . It is assumed that this custom field can contain multiple values. JIRA_FIELD (Field name containing TCodes. Sample: customfield_10006) If you have custom fields containing main SAP module, you need to register their custom fields into YTTICKSYS_JIMMF . The program will find the first non-empty field and assume it to be the main module. JIRA_FIELD (Field name containing module. Sample: customfield_10109) If you have custom fields containing ticket location, you need to register their custom fields into YTTICKSYS_JILOF . The program will assume the corresponding JSON response to be an array and concatenate locations. JIRA_FIELD (Field name containing location. Sample: customfield_10139) If you have custom fields containing platform, you need to register their custom fields into YTTICKSYS_JIPLF . The program will find the first non-empty field and assume it to be the platform. JIRA_FIELD (Field name containing platform. Sample: customfield_10081) If you will be using GET_EARLIEST_STATUS , you need to fill YTTICKSYS_JISTO with the correct order of Jira statuses. This table is text based because ID's may change with each new definition, but status descriptions are typically stable. JSTATUS_TEXT_PATTERN (Status text pattern. Sample: DUZELTILIYOR*) STATUS_ORDER (Order of status. Sample: 9) In some cases, you may want to replace values in Jira's JSON response. Typical case: Shortened number format (3.06E8) may not be supported by SAP's JSON parser. In such a case, you can use the table YTTICKSYS_JIJRR to replace those pesky values. REPLACE_ORDER (Order of rule) JSON_REGEX Regex value to be replaced. Sample: .customfield_15255.:*\\d\\.\\d\\dE\\d, NEW_JSON_VAL (Value to placed instead of RegEx. Leave empty to remove the RegEx value) Check the menu YTICKSYS for any further configuration which may have been missed in this document.","title":"Activating Jira"},{"location":"jira/#activating-jira","text":"Add a new entry to YTTICKSYS_TICSY with the following values: TICSY_ID JIRA TICSY_TXT Jira TICSY_IMP_CLASS YCL_TICKSYS_JIRA Add a new entry to YTTICKSYS_JIDEF with the following values: SYSID (Your SY-SYSID) URL (Your base Jira URL) USERNAME (Your Jira username) PASSWORD (Your Jira password) API_TOKEN (Your Jira API token) Note that you must enter either a password or an API token. If you are accessing an on-premise Jira system with basic authentication, you should put in the password. If you are accessing Jira Cloud, you must create an API token for the user and put in the generated token. Add new entries to YTTICKSYS_JITRA for each status transition. For each \"STATUS A -> STATUS B\" transition, Jira has a unique transition ID. This table stores those values. In You may need help from your Jira admin to get those ID's since they are not visible on the user interface. FROM_STATUS (Source status ID. Sample: 10306) TO_STATUS (Target status ID. Sample: 10313) TRANSITION_ID (Transition ID. Sample: 91) Add new entries to YTTICKSYS_JISTA . This table determines the assignee to be assigned to the issue after a status update. STATUS_ID (Source status ID, leave blank for default. Sample: 10306) JIRA_FIELD (Field name containing the assignee. Sample: customfield_10114) PRIORITY (Priority of this rule) If you have custom fields for request transportation instructions, you need to register their custom fields into YTTICKSYS_JITIF . JIRA_FIELD (Field name containing instructions. Sample: customfield_10427) If you have custom fields containing related SAP TCode values, you need to register their custom fields into YTTICKSYS_JITCF . It is assumed that this custom field can contain multiple values. JIRA_FIELD (Field name containing TCodes. Sample: customfield_10006) If you have custom fields containing main SAP module, you need to register their custom fields into YTTICKSYS_JIMMF . The program will find the first non-empty field and assume it to be the main module. JIRA_FIELD (Field name containing module. Sample: customfield_10109) If you have custom fields containing ticket location, you need to register their custom fields into YTTICKSYS_JILOF . The program will assume the corresponding JSON response to be an array and concatenate locations. JIRA_FIELD (Field name containing location. Sample: customfield_10139) If you have custom fields containing platform, you need to register their custom fields into YTTICKSYS_JIPLF . The program will find the first non-empty field and assume it to be the platform. JIRA_FIELD (Field name containing platform. Sample: customfield_10081) If you will be using GET_EARLIEST_STATUS , you need to fill YTTICKSYS_JISTO with the correct order of Jira statuses. This table is text based because ID's may change with each new definition, but status descriptions are typically stable. JSTATUS_TEXT_PATTERN (Status text pattern. Sample: DUZELTILIYOR*) STATUS_ORDER (Order of status. Sample: 9) In some cases, you may want to replace values in Jira's JSON response. Typical case: Shortened number format (3.06E8) may not be supported by SAP's JSON parser. In such a case, you can use the table YTTICKSYS_JIJRR to replace those pesky values. REPLACE_ORDER (Order of rule) JSON_REGEX Regex value to be replaced. Sample: .customfield_15255.:*\\d\\.\\d\\dE\\d, NEW_JSON_VAL (Value to placed instead of RegEx. Leave empty to remove the RegEx value) Check the menu YTICKSYS for any further configuration which may have been missed in this document.","title":"Activating Jira"},{"location":"ticket/","text":"Implementing a new ticketing system Assumptions This interface generally assumes that: There is a ticketing system It has APIs which can be called from ABAP Each ticket has its unique ID Tickets have status codes which can be stringified Tickets have assignees Tickets have open / closed status Optional stuff: Tickets may have parent-child relations Tickets may be linked to each other Tickets may be related to SAP TCodes Tickets may be related to SAP modules (MM, SD, etc) Tickets may be viewed over an URL API may enable us to change ticket statuses Tickets may have different types (bug, feature, etc) Tickets may contain instructions regarding SAP transport requests Development steps Basically, you need to create Z-implementations of the interface YIF_TICKSYS_TICKETING_SYSTEM . That's it. Obviously, the ticketing system should have corresponding APIs for the functionalities you need to use. This interface is responsible for the communication between SAP and the ticketing system. You can see the interface here . For each ticketing system you have, you need to have distinct implementation of this interface. A sample implementation for Jira can be seen here . Here is a list of methods that need to be implemented. Most are optional; depending on your use case. METHODS is_ticket_id_valid IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(output) TYPE abap_bool RAISING ycx_ticksys_ticketing_system. Detects if the given ticket ID is valid and returns the result. If this method is called with an invalid ticket ID, it should return SPACE. METHODS can_set_ticket_to_status IMPORTING !ticket_id TYPE yd_ticksys_ticket_id !status_id TYPE yd_ticksys_ticket_status_id RETURNING VALUE(result) TYPE abap_bool RAISING ycx_ticksys_ticketing_system. Determines if the ticket is suitable to be set to the given status code. METHODS get_ticket_header IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(output) TYPE ysticksys_ticket_header RAISING ycx_ticksys_ticketing_system. Returns ticket header information. Fields to return: Ticket ID Ticket description Status ID Status description Parent ticket ID (if exists) Ticket open / closed flag Ticket type ID Ticket type description SAP module ID SAP module description Current ticket assignee username METHODS get_transport_instructions IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(instructions) TYPE string_list RAISING ycx_ticksys_ticketing_system. If tickets have fields for SAP transport instructions, this method should return them per ticket ID. METHODS get_sub_tickets IMPORTING !parent TYPE yd_ticksys_ticket_id RETURNING VALUE(children) TYPE ticket_id_list RAISING ycx_ticksys_ticketing_system. If the ticketing system supports parent-child relations, this method should return the sub-tickets of the given parent ticket. METHODS get_linked_tickets IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_ticksys_ticketing_system. If the ticketing system supports inter-ticket links, this method should return a table of linked tickets of the given ticket ID. METHODS get_related_tcodes IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(tcodes) TYPE tcode_list RAISING ycx_ticksys_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return them. METHODS get_tickets_related_to_tcodes IMPORTING !tcodes TYPE tcode_list RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_ticksys_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return the tickets related to the given SAP TCode. METHODS get_earliest_status IMPORTING !statuses TYPE status_id_list RETURNING VALUE(earliest) TYPE status_dict RAISING ycx_ticksys_ticketing_system. This method should pick the earliest status in the given status list, and return it. Hint: If this metadata does not exist in the ticketing system, you can create a Z-table containing status codes & their sequence, and return the earliest status from there. METHODS get_tickets_with_status IMPORTING !statuses TYPE status_id_list !types TYPE type_id_list OPTIONAL RETURNING VALUE(tickets) TYPE ticket_status_list RAISING ycx_ticksys_ticketing_system. This method should query the ticketing system and return the tickets corresponding to the given statuses & types. METHODS set_ticket_status IMPORTING !ticket_id TYPE yd_ticksys_ticket_id !status_id TYPE yd_ticksys_ticket_status_id RAISING ycx_ticksys_ticketing_system. This method should change the ticket status to the given status ID. METHODS set_ticket_assignee IMPORTING !ticket_id TYPE yd_ticksys_ticket_id assignee TYPE clike RAISING ycx_ticksys_ticketing_system. This method should set the ticket assignee to the given username. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS set_ticket_assignee_for_status IMPORTING !ticket_id TYPE yd_ticksys_ticket_id !status_id TYPE yd_ticksys_ticket_status_id RAISING ycx_ticksys_ticketing_system. This method should set the ticket assignee based on the ticket status. For instance; if the ticket is set to \"Transported to QA\" status, this method should assign the ticket to the user who should run the test. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS display_ticket IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RAISING ycx_ticksys_ticketing_system. This method should build the URL of the ticket, and open the ticket in a browser. If the ticketing system is not web based, it should call the executable to display the ticket (if possible). Customizing After finishing the steps above, add a new entry to YTTICKSYS_TICSY with the following values: TICSY_ID (a unique ID) TICSY_TXT (description of the ticketing system) TICSY_IMP_CLASS (name of your Z-Class implementing YIF_TICKSYS_TICKETING_SYSTEM)","title":"Implementing a new ticketing system"},{"location":"ticket/#implementing-a-new-ticketing-system","text":"","title":"Implementing a new ticketing system"},{"location":"ticket/#assumptions","text":"This interface generally assumes that: There is a ticketing system It has APIs which can be called from ABAP Each ticket has its unique ID Tickets have status codes which can be stringified Tickets have assignees Tickets have open / closed status Optional stuff: Tickets may have parent-child relations Tickets may be linked to each other Tickets may be related to SAP TCodes Tickets may be related to SAP modules (MM, SD, etc) Tickets may be viewed over an URL API may enable us to change ticket statuses Tickets may have different types (bug, feature, etc) Tickets may contain instructions regarding SAP transport requests","title":"Assumptions"},{"location":"ticket/#development-steps","text":"Basically, you need to create Z-implementations of the interface YIF_TICKSYS_TICKETING_SYSTEM . That's it. Obviously, the ticketing system should have corresponding APIs for the functionalities you need to use. This interface is responsible for the communication between SAP and the ticketing system. You can see the interface here . For each ticketing system you have, you need to have distinct implementation of this interface. A sample implementation for Jira can be seen here . Here is a list of methods that need to be implemented. Most are optional; depending on your use case. METHODS is_ticket_id_valid IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(output) TYPE abap_bool RAISING ycx_ticksys_ticketing_system. Detects if the given ticket ID is valid and returns the result. If this method is called with an invalid ticket ID, it should return SPACE. METHODS can_set_ticket_to_status IMPORTING !ticket_id TYPE yd_ticksys_ticket_id !status_id TYPE yd_ticksys_ticket_status_id RETURNING VALUE(result) TYPE abap_bool RAISING ycx_ticksys_ticketing_system. Determines if the ticket is suitable to be set to the given status code. METHODS get_ticket_header IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(output) TYPE ysticksys_ticket_header RAISING ycx_ticksys_ticketing_system. Returns ticket header information. Fields to return: Ticket ID Ticket description Status ID Status description Parent ticket ID (if exists) Ticket open / closed flag Ticket type ID Ticket type description SAP module ID SAP module description Current ticket assignee username METHODS get_transport_instructions IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(instructions) TYPE string_list RAISING ycx_ticksys_ticketing_system. If tickets have fields for SAP transport instructions, this method should return them per ticket ID. METHODS get_sub_tickets IMPORTING !parent TYPE yd_ticksys_ticket_id RETURNING VALUE(children) TYPE ticket_id_list RAISING ycx_ticksys_ticketing_system. If the ticketing system supports parent-child relations, this method should return the sub-tickets of the given parent ticket. METHODS get_linked_tickets IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_ticksys_ticketing_system. If the ticketing system supports inter-ticket links, this method should return a table of linked tickets of the given ticket ID. METHODS get_related_tcodes IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RETURNING VALUE(tcodes) TYPE tcode_list RAISING ycx_ticksys_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return them. METHODS get_tickets_related_to_tcodes IMPORTING !tcodes TYPE tcode_list RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_ticksys_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return the tickets related to the given SAP TCode. METHODS get_earliest_status IMPORTING !statuses TYPE status_id_list RETURNING VALUE(earliest) TYPE status_dict RAISING ycx_ticksys_ticketing_system. This method should pick the earliest status in the given status list, and return it. Hint: If this metadata does not exist in the ticketing system, you can create a Z-table containing status codes & their sequence, and return the earliest status from there. METHODS get_tickets_with_status IMPORTING !statuses TYPE status_id_list !types TYPE type_id_list OPTIONAL RETURNING VALUE(tickets) TYPE ticket_status_list RAISING ycx_ticksys_ticketing_system. This method should query the ticketing system and return the tickets corresponding to the given statuses & types. METHODS set_ticket_status IMPORTING !ticket_id TYPE yd_ticksys_ticket_id !status_id TYPE yd_ticksys_ticket_status_id RAISING ycx_ticksys_ticketing_system. This method should change the ticket status to the given status ID. METHODS set_ticket_assignee IMPORTING !ticket_id TYPE yd_ticksys_ticket_id assignee TYPE clike RAISING ycx_ticksys_ticketing_system. This method should set the ticket assignee to the given username. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS set_ticket_assignee_for_status IMPORTING !ticket_id TYPE yd_ticksys_ticket_id !status_id TYPE yd_ticksys_ticket_status_id RAISING ycx_ticksys_ticketing_system. This method should set the ticket assignee based on the ticket status. For instance; if the ticket is set to \"Transported to QA\" status, this method should assign the ticket to the user who should run the test. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS display_ticket IMPORTING !ticket_id TYPE yd_ticksys_ticket_id RAISING ycx_ticksys_ticketing_system. This method should build the URL of the ticket, and open the ticket in a browser. If the ticketing system is not web based, it should call the executable to display the ticket (if possible).","title":"Development steps"},{"location":"ticket/#customizing","text":"After finishing the steps above, add a new entry to YTTICKSYS_TICSY with the following values: TICSY_ID (a unique ID) TICSY_TXT (description of the ticketing system) TICSY_IMP_CLASS (name of your Z-Class implementing YIF_TICKSYS_TICKETING_SYSTEM)","title":"Customizing"}]}